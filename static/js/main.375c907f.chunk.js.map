{"version":3,"sources":["components/Check.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Check","i","shdate","test","result","difference","di","res","useState","showabs","setShowabs","showpre","setShowpre","Dates","useEffect","input","document","getElementById","addEventListener","sh","files","getSheets","then","sheets","forEach","obj","readXlsxFile","sheet","name","rows","push","second","cols","length","Set","includes","sort","style","color","fontFamily","id","type","onClick","console","log","className","width","padding","fontSize","textAlign","map","item","it","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.375c907f.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport readXlsxFile  from 'read-excel-file'\r\nimport sh  from 'read-excel-file'\r\nimport second from 'read-excel-file'\r\nimport { MDBBtn } from 'mdbreact';\r\nfunction Check() {\r\n    let test=[],result=[];\r\n    let difference=[],di=[],res=[];\r\n    let i,shdate;\r\n    const[showabs,setShowabs]=useState([])\r\n    const [showpre,setShowpre]=useState([])\r\n    const[Dates,setDate]=useState([])\r\n    useEffect(()=>{\r\nconst input = document.getElementById('input');\r\ninput.addEventListener(\"change\",()=>{\r\n    sh((input.files[0]), { getSheets: true }).then((sheets) => {\r\n        sheets.forEach((obj)=>{\r\n                  \r\n             readXlsxFile((input.files[0]), { sheet: sheets[0].name }).then((rows) => {\r\n                shdate=obj.name;\r\n                if(shdate!=sheets[0].name){\r\n                    Dates.push(obj.name)\r\n                second((input.files[0]), { sheet: shdate }).then((cols)=>{\r\n                    test=[]\r\n               for(i=0;i<cols.length;i++){\r\n                  test.push(cols[i][0])\r\n                }\r\n                test=[...new Set(test)]\r\n                res=[];di=[]\r\n                for(i=0;i<rows.length;i++){\r\n                    if(test.includes(rows[i][1])) {res.push(rows[i][0])}\r\n                    else{di.push(rows[i][0])}\r\n                }\r\n              res=res.sort();di=di.sort()\r\n               result.push(res)\r\n               difference.push(di)\r\n             \r\n                  })} \r\n                 })          \r\n         })},[])  })})\r\n    \r\n\r\n     const click=()=> {\r\n        setShowabs(difference); \r\n        setShowpre(result);\r\n    console.log(Dates)}\r\n\r\n     return (\r\n        \r\n        <div><br/>\r\n             <h1 style={{color:\"#073590\",fontFamily:\"cursive\"}}>GET  ATTENDANCE BY UPLOADING  FILE</h1>\r\n            <br/>\r\n            \r\n            <h5>UPLOAD FILE üëâüèªüëâüèªüëâüèª <input id=\"input\" type=\"file\"/></h5><br/>\r\n            \r\n            <MDBBtn onClick={click} color=\"primary\"><strong>CLICK FOR ATTENDANCE</strong></MDBBtn><br/><br/>\r\n            <form className=\"form-inline justify-content-center\">\r\n            <div className=\"card border-primary mb-3\" style={{width:\"35%\",padding:\"1%\",fontSize:\"17px\",color:\"#0000ff\",fontFamily:\"cursive\",textAlign:\"left\"}}>\r\n            ‚ñ∫ Make sure that the First sheet in your file contain all Students RollNumbers in the first column and Names in the Second column.\r\n            <br/><br/>‚ñ∫ Copy Names of Students from the Downloaded Sheet of Teams and Paste in new sheet of the same file which contains your First Sheet.\r\n            <br/><br/> ‚ñ∫ Save sheet as DATE in the Downloaded Sheet from Teams. \r\n           <br/><br/> ‚ñ∫ You can have multiple sheets in File . Make sure Names of the Students in all the sheets are same . Upload the file and Click the button.\r\n        </div>\r\n            </form>\r\n                <br/><br/>\r\n          {showpre.map((item,i)=>(\r\n                    <div className=\"card\">\r\n                    <table><br/>\r\n                        <th>\r\n                       <h4 style={{color:\"blue\",fontFamily:\"cursive\"}}> Present</h4>\r\n                       <table className=\"table table-striped\">\r\n                    {item.map(it=>(\r\n              <tr><strong>{it}</strong></tr>\r\n                       ))} </table>\r\n                       </th>\r\n                      <th><h4 style={{fontFamily:\"cursive\"}}>DATE : {Dates[i]}</h4></th>\r\n                       <th>\r\n                       <h4 style={{color:\"red\",fontFamily:\"cursive\"}}>Absent</h4>\r\n                       <table className=\"table table-striped\">\r\n                    {showabs[i].map(it=>(\r\n              <tr><strong>{it}</strong></tr>\r\n                       ))} </table>\r\n                       </th>\r\n                   <br/>\r\n                   </table>\r\n                   </div>\r\n                 ))}\r\n               </div>\r\n     )\r\n}\r\nexport default Check\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Teams from './components/Check';\nimport Check from './components/Check';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Check/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}