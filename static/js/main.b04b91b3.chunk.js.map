{"version":3,"sources":["components/Fload.js","components/Teams.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Fload","props","type","id","onClick","ReptileListItems","Teams","i","shdate","main","test","result","show","difference","useEffect","console","log","input","document","getElementById","addEventListener","sh","files","getSheets","then","sheets","forEach","obj","name","readXlsxFile","sheet","rows","second","cols","length","push","element","table","alert","ronumbers","sort","filter","x","includes","writeln","map","reptile","write","sdate","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"yKAgBeA,MAdf,SAAeC,GACX,OACI,6BACK,4CACD,2BAAOC,KAAK,OAAOC,GAAG,UAC5B,6BAEA,4BAAQC,QAASH,EAAMI,kBAAvB,+BC0FSC,MA1Ff,WACI,IAEIC,EAAEC,EAFFC,EAAK,GAAGC,EAAK,GAAGC,EAAO,GAAGC,EAAK,GAC/BC,EAAW,GA+Ed,OA7EDC,qBAAU,WAEdC,QAAQC,IAAI,WAEZ,IAAMC,EAAQC,SAASC,eAAe,SACtCF,EAAMG,iBAAiB,UAAS,WAC5BC,YAAIJ,EAAMK,MAAM,GAAK,CAAEC,WAAW,IAAQC,MAAK,SAACC,GAC5CA,EAAOC,SAAQ,SAACC,GAEXZ,QAAQC,IAAIW,EAAIC,MAChBpB,EAAOmB,EAAIC,KACXC,YAAcZ,EAAMK,MAAM,GAAK,CAAEQ,MAAO,QAASN,MAAK,SAACO,GAEpDC,YAAQf,EAAMK,MAAM,GAAK,CAAEQ,MAAOH,EAAIC,OAAQJ,MAAK,SAACS,GAKlD,IAFAxB,EAAKsB,EAEDxB,EAAE,EAAEA,EAAE0B,EAAKC,OAAO3B,KAEX,IAAJA,GAIK0B,EAAK1B,GAAG,KAAK0B,EAAK1B,EAAE,GAAG,KAF3BG,EAAKyB,KAAKF,EAAK1B,GAAG,IASzBK,EAAKmB,EAENhB,QAAQC,IAAI,OAAUW,EAAIC,MAC5BjB,EAAOwB,KAAK,OAAUR,EAAIC,MAGxBlB,EAAKgB,SAAQ,SAAAU,GAET,IAAI7B,KAAKE,EAEFA,EAAKF,GAAG,KAAK6B,IAEZrB,QAAQsB,MAAM5B,EAAKF,GAAG,IAEvBI,EAAOwB,KAAK1B,EAAKF,GAAG,yBAS5C,IAwBG,6BACG,kBAAC,EAAD,CAAOF,iBAxBU,WACpBiC,MAAM,WAGT,IAAIC,EAAU,GACd,IAAIhC,KAAKK,EAEL2B,EAAUJ,KAAKvB,EAAKL,GAAG,IAO3B,OAJAI,EAAOA,EAAO6B,OACd3B,EAAa0B,EAAUE,QAAO,SAAAC,GAAC,OAAK/B,EAAOgC,SAASD,MACpDxB,SAAS0B,QAAQ,yBAAyBpC,EAAO,SACjDO,QAAQC,IAAI,MAAMH,GACXA,EAAWgC,KAAI,SAACC,GAEhB5B,SAAS0B,QAAQE,EAAQ,OACzB5B,SAAS6B,MAAM,UAO2BC,MAAOxC,MC/E9CyC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDyHpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.b04b91b3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Fload(props) {\r\n    return (\r\n        <div>\r\n             <h1>Upload FILE </h1>\r\n            <input type=\"file\" id=\"input\" />\r\n      <div>\r\n      \r\n      <button onClick={props.ReptileListItems}>CLICK FOR Absent Numbers</button>\r\n       </div>\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fload\r\n","import React,{useEffect} from 'react'\r\n// const xlsxFile = require('read-excel-file/node');\r\n// const second=require('read-excel-file/node');\r\n// const sh=require('read-excel-file/node');\r\nimport readXlsxFile  from 'read-excel-file'\r\nimport sh  from 'read-excel-file'\r\nimport second from 'read-excel-file'\r\nimport Fload from './Fload';\r\n\r\nfunction Teams() {\r\n    let main=[],test=[],result=[],show=[],abs=[];\r\n    let difference=[];\r\n    let i,shdate;\r\n    useEffect(()=>{\r\n\r\nconsole.log(\"welcome\")\r\n\r\nconst input = document.getElementById('input');\r\ninput.addEventListener(\"change\",()=>{\r\n    sh((input.files[0]), { getSheets: true }).then((sheets) => {\r\n        sheets.forEach((obj)=>{\r\n         \r\n             console.log(obj.name);\r\n             shdate=obj.name;\r\n             readXlsxFile((input.files[0]), { sheet: 'cse' }).then((rows) => {\r\n      \r\n                second((input.files[0]), { sheet: obj.name }).then((cols)=>{\r\n                  //console.log(cols);\r\n                  //console.log(rows);\r\n                  main=rows;\r\n                 // console.log(cols)\r\n                  for(i=0;i<cols.length;i++)\r\n                  {\r\n                      if(i===0)\r\n                      {\r\n                          test.push(cols[i][0])\r\n                      }\r\n                      else if(cols[i][0]!==cols[i-1][0])\r\n                      {\r\n                          test.push(cols[i][0])\r\n                      }\r\n                  }\r\n                  //test=cols;\r\n                   //console.log(test);\r\n                   show=rows;\r\n                       \r\n                  console.log(\"date\"+\"\"+obj.name);\r\n                result.push(\"date\"+\"\"+obj.name);\r\n                  //result=[];\r\n                  //document.writeln(\"date\"+\"\"+obj.name)\r\n                  test.forEach(element => {\r\n                      //console.log(element[0])\r\n                      for(i in main){\r\n\r\n                          if(main[i][1]===element)\r\n                          {\r\n                              console.table(main[i][0])\r\n                             //document.writeln(main[i][0])\r\n                             result.push(main[i][0])\r\n                           //  console.log(result)\r\n                          }\r\n                          \r\n                         }\r\n                      });  })  })          \r\n         })\r\n     })\r\n    \r\n}) },[])\r\n     const ReptileListItems=()=> {\r\n        alert(\"welcome\")\r\n     // show=result;\r\n     //console.log(show);\r\n     let ronumbers=[];\r\n     for(i in show)\r\n     {\r\n         ronumbers.push(show[i][0])\r\n     }\r\n  \r\n     result=result.sort();\r\n     difference = ronumbers.filter(x => !result.includes(x));\r\n     document.writeln(\"<h1>Absenties numbers:\"+shdate+\"</h1>\")\r\n     console.log(\"abs\"+difference)\r\n     return difference.map((reptile) => {\r\n            \r\n            document.writeln(reptile+\",\\n\")\r\n            document.write('\\n');\r\n        });\r\n \r\n         \r\n     };\r\n     return (\r\n        <div>\r\n           <Fload ReptileListItems={ReptileListItems} sdate={shdate} />\r\n           \r\n               \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Teams\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Teams from './components/Teams';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Teams/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}