{"version":3,"sources":["components/Teams.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Teams","i","main","test","result","show","difference","useState","showabs","setShowabs","showpre","setShowpre","useEffect","console","log","input","document","getElementById","addEventListener","readXlsxFile","files","sheet","then","rows","second","cols","length","push","forEach","element","table","className","type","id","onClick","ronumbers","sort","filter","x","includes","map","reptile","toString","item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"iLAqJeA,MAvIf,WACI,IAEIC,EAFAC,EAAK,GAAGC,EAAK,GAAGC,EAAO,GAAGC,EAAK,GAC/BC,EAAW,GAFF,EAIaC,mBAAS,IAJtB,mBAIPC,EAJO,KAICC,EAJD,OAKcF,mBAAS,IALvB,mBAKNG,EALM,KAKEC,EALF,KAsGZ,OAhGDC,qBAAU,WAEdC,QAAQC,IAAI,WAEZ,IAAMC,EAAQC,SAASC,eAAe,SACtCF,EAAMG,iBAAiB,UAAS,WAMnBC,YAAcJ,EAAMK,MAAM,GAAK,CAAEC,MAAO,QAASC,MAAK,SAACC,GAEpDC,YAAQT,EAAMK,MAAM,GAAK,CAAEC,MAAO,UAAWC,MAAK,SAACG,GAKjD,IAFAvB,EAAKqB,EACNV,QAAQC,IAAIW,GACPxB,EAAE,EAAEA,EAAEwB,EAAKC,OAAOzB,KAEX,IAAJA,GAIKwB,EAAKxB,GAAG,KAAKwB,EAAKxB,EAAE,GAAG,KAF3BE,EAAKwB,KAAKF,EAAKxB,GAAG,IAQzBY,QAAQC,IAAIX,GACZE,EAAKkB,EAMNpB,EAAKyB,SAAQ,SAAAC,GAET,IAAI5B,KAAKC,EAEFA,EAAKD,GAAG,KAAK4B,IAEZhB,QAAQiB,MAAM5B,EAAKD,GAAG,IAEvBG,EAAOuB,KAAKzB,EAAKD,GAAG,IACtBY,QAAQC,IAAIV,kBAQhC,IA4CC,yBAAK2B,UAAU,mBACf,yBAAKA,UAAU,OACV,yBAAKA,UAAU,OAAM,8CACtB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAAQ,2BAAOC,KAAK,OAAOC,GAAG,WAC7C,yBAAKF,UAAU,SAAQ,4BAAQG,QA5CjB,WAEvB,IAAIC,EAAU,GACd,IAAIlC,KAAKI,EAEL8B,EAAUR,KAAKtB,EAAKJ,GAAG,IAG3BG,EAAOA,EAAOgC,OACd9B,EAAa6B,EAAUE,QAAO,SAAAC,GAAC,OAAKlC,EAAOmC,SAASD,MACjDhC,EAGHF,EAAOoC,KAAI,SAACC,OAMZ5B,QAAQC,IAAI,MAAMR,GACRA,EAAWoC,WAQrBpC,EAAWkC,KAAI,SAACC,OAMbhC,EAAWH,GACXK,EAAWP,KASkB,8BAEvB,yBAAK2B,UAAU,OAEf,yBAAKA,UAAU,SACf,2BAAQA,UAAU,wBAChB,4BAAI,wCACL,4BAAI,gCAEnBrB,EAAQ8B,KAAI,SAACG,GAAD,OAAQ,wBAAIC,IAAKD,GAAOA,MAFjB,QAOP,yBAAKZ,UAAU,SACf,2BAAOA,UAAU,wBACjB,4BAAI,+CAEJvB,EAAQgC,KAAI,SAACG,GAAD,OAAQ,wBAAIC,IAAKD,GAAM,4BAAKA,YChIrCE,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDyHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9619a6ed.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\r\n// const xlsxFile = require('read-excel-file/node');\r\n// const second=require('read-excel-file/node');\r\n// const sh=require('read-excel-file/node');\r\nimport readXlsxFile  from 'read-excel-file'\r\nimport sh  from 'read-excel-file'\r\nimport second from 'read-excel-file'\r\nimport Fload from './Fload';\r\n// const send = require('gmail-send')({\r\n//   user: 'aits.cse.nba1234@gmail.com',\r\n//   pass: 'dontopen',\r\n//   to:   'surajsheru@gmail.com',\r\n//   subject: 'test subject',\r\n// });\r\nfunction Teams() {\r\n    let main=[],test=[],result=[],show=[];\r\n    let difference=[],di=[];\r\n    let i,shdate;\r\n    const[showabs,setShowabs]=useState([])\r\n    const [showpre,setShowpre]=useState([])\r\n    useEffect(()=>{\r\n\r\nconsole.log(\"welcome\")\r\n\r\nconst input = document.getElementById('input');\r\ninput.addEventListener(\"change\",()=>{\r\n    //sh((input.files[0]), { getSheets: true }).then((sheets) => {\r\n      //  sheets.forEach((obj)=>{\r\n         \r\n        //     console.log(obj.name);\r\n          //   shdate=obj.name;\r\n             readXlsxFile((input.files[0]), { sheet: 'cse' }).then((rows) => {\r\n      \r\n                second((input.files[0]), { sheet: 'today' }).then((cols)=>{\r\n                  //console.log(cols);\r\n                  //console.log(rows);\r\n                  main=rows;\r\n                 console.log(cols)\r\n                  for(i=0;i<cols.length;i++)\r\n                  {\r\n                      if(i===0)\r\n                      {\r\n                          test.push(cols[i][0])\r\n                      }\r\n                      else if(cols[i][0]!==cols[i-1][0])\r\n                      {\r\n                          test.push(cols[i][0])\r\n                      }\r\n                  }\r\n                  //test=cols;\r\n                   console.log(test);\r\n                   show=rows;\r\n                       \r\n                 // console.log(\"date\"+\"\"+obj.name);\r\n                //result.push(\"date\"+\"\"+obj.name);\r\n                  //result=[];\r\n                  //document.writeln(\"date\"+\"\"+obj.name)\r\n                  test.forEach(element => {\r\n                      //console.log(element[0])\r\n                      for(i in main){\r\n\r\n                          if(main[i][1]===element)\r\n                          {\r\n                              console.table(main[i][0])\r\n                             //document.writeln(main[i][0])\r\n                             result.push(main[i][0])\r\n                           console.log(result)\r\n                          }\r\n                          \r\n                         }\r\n                      });  \r\n                    }) \r\n                 })          \r\n         })\r\n     },[])\r\n    \r\n//}) \r\n//},\r\n//[])\r\n     const ReptileListItems=()=> {\r\n        \r\n     let ronumbers=[];\r\n     for(i in show)\r\n     {\r\n         ronumbers.push(show[i][0])\r\n     }\r\n  \r\n     result=result.sort();\r\n     difference = ronumbers.filter(x => !result.includes(x));\r\n     di=difference;\r\n     //document.writeln(\"<h1>Present  numbers:\"+shdate+\"</h1>\")\r\n    \r\n     result.map((reptile) => {\r\n            \r\n       // document.writeln(reptile+\",\\n\")\r\n       // document.write('\\n');\r\n    });\r\n    //document.writeln(\"<h1>Absenties numbers:\"+shdate+\"</h1>\")\r\n     console.log(\"abs\"+difference)\r\n     let  list=difference.toString();\r\n    //  //send mail\r\n    //  send({\r\n    //   text:    \"suraj\",  \r\n    // }, (error, result, fullResult) => {\r\n    //   if (error) console.error(error);\r\n    //   console.log(result);\r\n    // })\r\n     difference.map((reptile) => {\r\n            \r\n           //document.writeln(reptile+\",\\n\")\r\n          //document.write('\\n');\r\n        });\r\n  \r\n        setShowabs(difference); \r\n        setShowpre(result);\r\n     };\r\n     return (\r\n        \r\n        <div className='container-fluid'>\r\n        <div className=\"row\">\r\n             <div className=\"col\"><h1>Upload FILE </h1></div></div>\r\n            <div className=\"row\">\r\n              <div className=\"col-8\"><input type=\"file\" id=\"input\" /></div>\r\n              <div className=\"col-4\"><button onClick={ReptileListItems}>CLICK FOR Absent Numbers</button></div>\r\n            </div>            \r\n              <div className=\"row\">\r\n\r\n              <div className=\"col-6\">\r\n              <table  className=\"table table-bordered\">   \r\n                <tr><td >PRESENT</td></tr>\r\n               <tr><td> {\r\n\r\nshowpre.map((item)=><li key={item}>{item}</li>)} </td></tr> \r\n           \r\n            \r\n            </table></div> \r\n            \r\n            <div className=\"col-6\">\r\n            <table className=\"table table-bordered\">\r\n            <tr><td>ABSENT NUMBERS</td></tr>\r\n            {   \r\n            showabs.map((item)=><tr key={item}><td>{item}</td></tr>)\r\n            }</table>\r\n            </div>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Teams\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Teams from './components/Teams';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Teams/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}